<odoo>
	<data noupdate='0'>
		<record id="fetch_new_branches" model="ir.cron">
			<field name="name">cicd.git.repo:_cron_fetch()</field>
			<field name="interval_number">30</field>
			<field name="interval_type">seconds</field>
			<field name="model_id" ref="model_cicd_git_repo" />
			<field name="state">code</field>
			<field name="code">model._cron_fetch()</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="update_docker_states_per_machine" model="ir.cron">
			<field name="name">cicd.machine:_update_docker_containers()</field>
			<field name="interval_number">10</field>
			<field name="interval_type">seconds</field>
			<field name="model_id" ref="model_cicd_machine" />
			<field name="state">code</field>
			<field name="code">model.search([])._update_docker_containers()</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="update_docker_states" model="ir.cron">
			<field name="name">cicd.git.branch:docker_get_state(now=True)</field>
			<field name="interval_number">10</field>
			<field name="interval_type">seconds</field>
			<field name="model_id" ref="model_cicd_git_branch" />
			<field name="state">code</field>
			<field name="code">model.with_context(active_test=False).search([]).docker_get_state(now=True)</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="inactivity_cycle_down" model="ir.cron">
			<field name="name">cicd.git.branch:inactivity_cycle_down()</field>
			<field name="interval_number">10</field>
			<field name="interval_type">minutes</field>
			<field name="model_id" ref="model_cicd_git_branch" />
			<field name="state">code</field>
			<field name="code">model.with_context(active_test=False).search([]).inactivity_cycle_down()</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="update_databases" model="ir.cron">
			<field name="name">update_databases</field>
			<field name="interval_number">1</field>
			<field name="interval_type">minutes</field>
			<field name="model_id" ref="model_cicd_postgres" />
			<field name="state">code</field>
			<field name="code">
model.search([]).update_databases()
			</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="update_volumes_dumps" model="ir.cron">
			<field name="name">update_volumes_dumps</field>
			<field name="interval_number">30</field>
			<field name="interval_type">seconds</field>
			<field name="model_id" ref="model_cicd_machine" />
			<field name="state">code</field>
			<field name="code">
env['cicd.machine.volume']._cron_update()
env['cicd.dump']._cron_update()
			</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="autobackup" model="ir.cron">
			<field name="name">autobackup</field>
			<field name="interval_number">1</field>
			<field name="interval_type">days</field>
			<field name="model_id" ref="model_cicd_git_branch" />
			<field name="state">code</field>
			<field name="code">model.search([('autobackup', '=', True)])._cron_autobackup()</field>
			<field name="nextcall" eval="'2022-01-01 02:00:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="testruns" model="ir.cron">
			<!--
				Creates test runs and executes startable test runs.
			-->
			<field name="name">testruns</field>
			<!-- increase -->
			<field name="interval_number">5</field>
			<field name="interval_type">seconds</field>
			<field name="model_id" ref="model_cicd_git_branch" />
			<field name="state">code</field>
			<field name="code">model._cron_make_test_runs()</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="update_candidates" model="ir.cron">
			<field name="name">cicd.release:collect_tested_branches and trigger recreate_candidate_branch()</field>
			<field name="interval_number">10</field>
			<field name="interval_type">minutes</field>
			<field name="model_id" ref="model_cicd_release" />
			<field name="state">code</field>
			<field name="code">
model.search([]).collect_tested_branches()
			</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="clean_old_tasks" model="ir.cron">
			<field name="name">cicd.task:_cron_cleanup()</field>
			<field name="interval_number">1</field>
			<field name="interval_type">days</field>
			<field name="model_id" ref="model_cicd_task" />
			<field name="state">code</field>
			<field name="code">model.search([])._cron_cleanup()</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="clean_branches" model="ir.cron">
			<field name="name">cicd.git.repo:_cron_cleanup()</field>
			<field name="interval_number">1</field>
			<field name="interval_type">days</field>
			<field name="model_id" ref="model_cicd_git_repo" />
			<field name="state">code</field>
			<field name="code">model.search([])._cron_cleanup()</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="clear_old_queuejobs" model="ir.cron">
			<field name="name">clear_old_jobs</field>
			<field name="interval_number">1</field>
			<field name="interval_type">minutes</field>
			<field name="model_id" ref="queue_job.model_queue_job" />
			<field name="state">code</field>
			<field name="code">
days = int(env['ir.config_parameter'].sudo().get_param(key="delete-jobs-older-than-days", default=10))
dt = (datetime.datetime.now() - datetime.timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
model.search([('date_created', '&lt;', dt), ('state', '=', 'done')], limit=500).unlink()
model.search([('identity_key', 'ilike', 'queuejob_fetch'), ('state', '=', 'done')], limit=200, order='id asc').unlink()

			</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="clear_old_mail_messages" model="ir.cron">
			<field name="name">clear_old_mail_messages</field>
			<field name="interval_number">1</field>
			<field name="interval_type">minutes</field>
			<field name="model_id" ref="mail.model_mail_message" />
			<field name="state">code</field>
			<field name="code">
days = int(env['ir.config_parameter'].sudo().get_param(key="delete-tasks-older-than-days", default=10))
dt = (datetime.datetime.now() - datetime.timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
ids = tuple(model.search([('create_date', '&lt;', dt)], limit=500).ids)
if ids:
	env.cr.execute("delete from mail_message where id in %s", (ids, ))

			</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="clear_old_tasks" model="ir.cron">
			<field name="name">clear_old_tasks</field>
			<field name="interval_number">1</field>
			<field name="interval_type">minutes</field>
			<field name="model_id" ref="model_cicd_task" />
			<field name="state">code</field>
			<field name="code">
days = int(env['ir.config_parameter'].sudo().get_param(key="delete-tasks-older-than-days", default=10))
dt = (datetime.datetime.now() - datetime.timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
model.search([('create_date', '&lt;', dt)], limit=500).unlink()

			</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="reschedule_failed_jobs" model="ir.cron">
			<field name="name">reschedule_failed_jobs</field>
			<field name="interval_number">1</field>
			<field name="interval_type">minutes</field>
			<field name="model_id" ref="queue_job.model_queue_job" />
			<field name="state">code</field>
			<field name="code">
reasons = [
	'could not serialize access due to concurrent update',
	'cannot stat',
	'server closed the connection unexpectedly',
	'RetryableJobError',
	'Failed to put the local file',
	'psycopg2.errors',
	'Timeout',
	'.git/index.lock',
	'duplicate key value violates unique constraint "cicd_git_commit_name"',
]
for reason in reasons:
	model.search([('state', '=', 'failed'), ('exc_info', 'ilike', reason)]).write({'state': 'pending'})</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="after_blocking_done_update" model="ir.cron">
			<field name="name">cicd.git.branch:_cron_check_blocking_done()</field>
			<field name="interval_number">1</field>
			<field name="interval_type">minutes</field>
			<field name="model_id" ref="model_cicd_git_branch" />
			<field name="state">code</field>
			<field name="code">model._cron_check_blocking_done()</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="garbage_collect_job" model="ir.cron">
			<field name="name">cicd.git.branch:_cron_garbage_collect()</field>
			<field name="interval_number">4</field>
			<field name="interval_type">hours</field>
			<field name="model_id" ref="model_cicd_git_branch" />
			<field name="state">code</field>
			<field name="code">model._cron_garbage_collect()</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="perform_release" model="ir.cron">
			<field name="name">perform_release</field>
			<field name="interval_number">1</field>
			<field name="interval_type">minutes</field>
			<field name="model_id" ref="model_cicd_release" />
			<field name="state">code</field>
			<field name="code">model.search([]).do_release_if_planned()</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
		<record id="update_task_states" model="ir.cron">
			<field name="name">update_task_states_to_failed_where_queuejob_is_missing</field>
			<field name="interval_number">1</field>
			<field name="interval_type">minutes</field>
			<field name="model_id" ref="model_cicd_task" />
			<field name="state">code</field>
			<field name="code">model.search([('state', 'in', [False, 'started'])])._set_failed_if_no_queuejob()</field>
			<field name="nextcall" eval="'2022-01-01 20:15:00'" />
			<field name="numbercall">-1</field>
		</record>
	</data>
</odoo>
